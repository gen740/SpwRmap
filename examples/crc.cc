#include <arm_acle.h>

#include <array>
#include <bit>
#include <print>
#include <span>
#include <vector>

static constexpr std::array<uint8_t, 256> CRC_LOOKUP_TABLE = {
    0x00, 0x91, 0xe3, 0x72, 0x07, 0x96, 0xe4, 0x75, 0x0e, 0x9f, 0xed, 0x7c, 0x09, 0x98, 0xea, 0x7b,
    0x1c, 0x8d, 0xff, 0x6e, 0x1b, 0x8a, 0xf8, 0x69, 0x12, 0x83, 0xf1, 0x60, 0x15, 0x84, 0xf6, 0x67,
    0x38, 0xa9, 0xdb, 0x4a, 0x3f, 0xae, 0xdc, 0x4d, 0x36, 0xa7, 0xd5, 0x44, 0x31, 0xa0, 0xd2, 0x43,
    0x24, 0xb5, 0xc7, 0x56, 0x23, 0xb2, 0xc0, 0x51, 0x2a, 0xbb, 0xc9, 0x58, 0x2d, 0xbc, 0xce, 0x5f,
    0x70, 0xe1, 0x93, 0x02, 0x77, 0xe6, 0x94, 0x05, 0x7e, 0xef, 0x9d, 0x0c, 0x79, 0xe8, 0x9a, 0x0b,
    0x6c, 0xfd, 0x8f, 0x1e, 0x6b, 0xfa, 0x88, 0x19, 0x62, 0xf3, 0x81, 0x10, 0x65, 0xf4, 0x86, 0x17,
    0x48, 0xd9, 0xab, 0x3a, 0x4f, 0xde, 0xac, 0x3d, 0x46, 0xd7, 0xa5, 0x34, 0x41, 0xd0, 0xa2, 0x33,
    0x54, 0xc5, 0xb7, 0x26, 0x53, 0xc2, 0xb0, 0x21, 0x5a, 0xcb, 0xb9, 0x28, 0x5d, 0xcc, 0xbe, 0x2f,
    0xe0, 0x71, 0x03, 0x92, 0xe7, 0x76, 0x04, 0x95, 0xee, 0x7f, 0x0d, 0x9c, 0xe9, 0x78, 0x0a, 0x9b,
    0xfc, 0x6d, 0x1f, 0x8e, 0xfb, 0x6a, 0x18, 0x89, 0xf2, 0x63, 0x11, 0x80, 0xf5, 0x64, 0x16, 0x87,
    0xd8, 0x49, 0x3b, 0xaa, 0xdf, 0x4e, 0x3c, 0xad, 0xd6, 0x47, 0x35, 0xa4, 0xd1, 0x40, 0x32, 0xa3,
    0xc4, 0x55, 0x27, 0xb6, 0xc3, 0x52, 0x20, 0xb1, 0xca, 0x5b, 0x29, 0xb8, 0xcd, 0x5c, 0x2e, 0xbf,
    0x90, 0x01, 0x73, 0xe2, 0x97, 0x06, 0x74, 0xe5, 0x9e, 0x0f, 0x7d, 0xec, 0x99, 0x08, 0x7a, 0xeb,
    0x8c, 0x1d, 0x6f, 0xfe, 0x8b, 0x1a, 0x68, 0xf9, 0x82, 0x13, 0x61, 0xf0, 0x85, 0x14, 0x66, 0xf7,
    0xa8, 0x39, 0x4b, 0xda, 0xaf, 0x3e, 0x4c, 0xdd, 0xa6, 0x37, 0x45, 0xd4, 0xa1, 0x30, 0x42, 0xd3,
    0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1, 0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf};

constexpr uint8_t polynomial = 0b10000111;
#include <bit>
#include <cstdint>

[[nodiscard]] constexpr auto rmap_crc_update(uint8_t crc, uint8_t byte) noexcept -> uint8_t {
  uint8_t data = byte;
  for (int i = 0; i < 8; ++i) {
    const uint8_t mix = ((crc ^ data) & 0x01U);
    crc = (crc >> 1);
    if (mix != 0U) {
      crc = (crc ^ 0xE0U);
    }
    data = (data >> 1);
  }
  return crc;
}

// // Reverse bit order of an 8-bit value (b7..b0 -> b0..b7).
// [[nodiscard]] constexpr auto reverse_bits8(std::uint8_t v) noexcept -> std::uint8_t {
//   std::uint8_t r = 0;
//   for (int i = 0; i < 8; ++i) {
//     if ((v >> i) & 0x1U) {
//       r |= static_cast<std::uint8_t>(1U << (7 - i));
//     }
//   }
//   return r;
// }
//
// // One-byte RMAP CRC update (ECSS-E-ST-50-52C, ยง8.2.3).
// [[nodiscard]] constexpr auto rmap_crc_update(std::uint8_t in_crc, std::uint8_t in_byte) noexcept
//     -> std::uint8_t {
//   // Map external to internal bit order.
//   std::uint8_t lfsr = reverse_bits8(in_crc);
//
//   for (int j = 0; j < 8; ++j) {
//     const auto bit = static_cast<uint8_t>((in_byte >> j) & 0x1U);
//     const auto b7 = static_cast<uint8_t>((lfsr >> 7) & 0x1U);
//     const auto b1 = static_cast<uint8_t>((lfsr >> 1) & 0x1U);
//     const auto b0 = static_cast<uint8_t>(lfsr & 0x1U);
//
//     const auto new2 = static_cast<uint8_t>(bit ^ b7 ^ b1);
//     const auto new1 = static_cast<uint8_t>(bit ^ b7 ^ b0);
//     const auto new0 = static_cast<uint8_t>(bit ^ b7);
//
//     // Shift: old bits 6..2 become new bits 7..3.
//     const std::uint8_t shifted = static_cast<std::uint8_t>((lfsr & 0x7CU) << 1);
//
//     lfsr = static_cast<std::uint8_t>(shifted | (new2 << 2) | (new1 << 1) | new0);
//   }
//
//   // Map internal to external bit order.
//   return reverse_bits8(lfsr);
// }

auto dumpData(std::span<const uint8_t> data) -> void {
  std::print("Data: ");
  for (const auto& byte : data) {
    std::print("{:08b} ", byte);
  }
  std::println();
}

auto calcCRCCopy(std::span<const uint8_t> data_) -> uint8_t {
  std::vector<uint8_t> data(data_.begin(), data_.end());
  data.push_back(0x00);  // Ensure we have a place for CRC

  dumpData(data);
  for (size_t i = 0; i < data.size() - 1; ++i) {
    while (data[i] != 0) {
      auto bit_width = std::bit_width(data[i]);
      data[i] ^= polynomial >> (8 - bit_width);
      data[i + 1] ^= polynomial << bit_width;
      // __rbit(data[i + 1]);
      dumpData(data);
    }
  }
  return data.back();
};

auto calcCRC(std::span<const uint8_t> data) -> uint8_t {
  uint8_t crc = 0x00;

  for (const auto& byte : data) {
    uint8_t tmp = crc ^ byte;
    while (true) {
      auto bit_width = std::bit_width(tmp);
      if (bit_width == 0) {
        break;  // No more bits to process
      }
      tmp = tmp ^ (polynomial >> (8 - bit_width));
      crc ^= polynomial << bit_width;
    }
  }
  return crc;
};

auto calcCRCUisngTable(std::span<const uint8_t> data) -> uint8_t {
  uint8_t crc = 0x00;
  for (const auto& byte : data) {
    crc = CRC_LOOKUP_TABLE[crc ^ byte];
  }
  return crc;
}

auto RmapCalculateCRC(std::span<const uint8_t> data) -> uint8_t {
  uint8_t crc = 0x00;
  for (const auto& byte : data) {
    crc = rmap_crc_update(crc, byte);
  }
  return crc;
}

auto main() -> int {
  auto data = std::array<uint8_t, 4>{0x23, 0x86, 0xF0, 0xA9};
  auto crc = calcCRC(data);
  data = std::array<uint8_t, 4>{0x23, 0x86, 0xF0, 0xA9};
  auto crc_copy = calcCRCCopy(data);
  data = std::array<uint8_t, 4>{0x23, 0x86, 0xF0, 0xA9};
  auto crc_using_table = calcCRCUisngTable(data);
  data = std::array<uint8_t, 4>{0x23, 0x86, 0xF0, 0xA9};
  auto rmap_crc = RmapCalculateCRC(data);

  std::println("CRC: {:#02x}", crc);
  std::println("CRC using copy: {:#02x}", crc_copy);
  std::println("CRC using table: {:#02x}", crc_using_table);
  std::println("RMAP CRC: {:#02x}", rmap_crc);

  return 0;
}
